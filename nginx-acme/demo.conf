server {
  listen [::]:80;
  listen 80;

  server_name www.example.com;

  return 301 $scheme://$host$request_uri;
}

server {
  # listen [::]:80 accept_filter=httpready; # for FreeBSD
  # listen 80 accept_filter=httpready; # for FreeBSD
  listen [::]:80;
  listen 80;

  # The host name to respond to
  server_name example.com;

  # Path for static files
  # root /var/www/example.com/public;

  return 301 https://$host$request_uri;


  # Custom error pages
  include h5bp/errors/custom_errors.conf;

  # Include the basic h5bp config set
  include h5bp/basic.conf;
}

server {
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  server_name www.example.com;

  include h5bp/ssl/ssl_engine.conf;
  # include h5bp/ssl/certificate_files.conf;
  ssl_certificate /etc/nginx/certs/example.com/fullchain.cer;
  ssl_certificate_key /etc/nginx/certs/example.com/example.com.key;
  include h5bp/ssl/policy_intermediate.conf;

  return 301 $scheme://$host$request_uri;
}


server {
  # listen [::]:443 ssl http2 accept_filter=dataready;  # for FreeBSD
  # listen 443 ssl http2 accept_filter=dataready;  # for FreeBSD
  listen [::]:443 ssl http2;
  listen 443 ssl http2;

  # The host name to respond to
  server_name example.com;

  include h5bp/ssl/ssl_engine.conf;
  # include h5bp/ssl/certificate_files.conf;
  ssl_certificate /etc/nginx/certs/example.com/fullchain.cer;
  ssl_certificate_key /etc/nginx/certs/example.com/example.com.key;
  include h5bp/ssl/policy_intermediate.conf;

  # Path for static files
  # root /var/www/example.com/public;

  # location / {
  #   root   /usr/share/nginx/html;
  #   index  index.html index.htm;
  # }

  # location / {
  #   proxy_pass   http://127.0.0.1;
  # }

  # Custom 404 page
  error_page 404 /404.html;

  # Include the basic h5bp config set
  include h5bp/basic.conf;
}